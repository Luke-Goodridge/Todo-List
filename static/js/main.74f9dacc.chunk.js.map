{"version":3,"sources":["components/todo-item/todo-item.module.css","components/todo-filter/todo-filter.module.css","components/progress-bar/progress-bar.module.css","components/todo-new/todo-new.module.css","components/todo-main/todo-main.module.css","localStorage.js","components/todo-item/todo-item.js","components/progress-bar/progress-bar.js","components/todo-new/todo-new.js","components/todo-filter/todo-filter.js","components/todo-main/todo-main.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","checkLocalStorage","key","fallbackValue","localStorage","getItem","JSON","parse","localStore","value","setItem","stringify","TodoItem","props","useState","buttonsShown","toggleButtons","toggleTodo","toggle","isCompleted","id","icon","className","styles","done","notDone","todo","onMouseOver","onMouseLeave","todoContent","onClick","text","data-tip","data-for","delete","remove","type","place","effect","ProgressBar","todosLeftText","doneTodos","totalTodos","todoProgress","BarStyle","backgroundColor","transition","textAlign","borderRadius","width","height","style","barContainer","barBackground","NewTodo","input","maxLength","onChange","inputHandler","onKeyPress","return","addBtn","addTodo","TodoFilters","filterString","Style","green","isFiltered","red","Filter","FilterBtn","click","TodoContainer","ID","Math","random","toString","substr","defaultTodos","completed","storage","list","filterList","todoList","updateMainTodos","todoInput","updateInputTodo","filteredList","updateFilteredList","filterTodos","useEffect","makeNewTodo","newTodo","undefined","trim","alert","some","toLowerCase","length","newID","newFilteredList","push","document","getElementById","removeTodo","newTodoList","find","window","confirm","toggleDone","splice","indexOf","state","todo_ID","filter","container","forEach","bind","map","e","target","preventDefault","App","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.74f9dacc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todo\":\"todo-item_todo__ZYTdw\",\"delete\":\"todo-item_delete__2SYcf\",\"edit\":\"todo-item_edit__22DnC\",\"done\":\"todo-item_done__2AReH\",\"notDone\":\"todo-item_notDone__q0hhU\",\"todoContent\":\"todo-item_todoContent__3kYSR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"todo-filter_Filter__1FIz5\",\"FilterBtn\":\"todo-filter_FilterBtn__21_wR\",\"red\":\"todo-filter_red__1tYeR\",\"green\":\"todo-filter_green__3wC0c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"barBackground\":\"progress-bar_barBackground__1sRtS\",\"barContainer\":\"progress-bar_barContainer__j_pvl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addBtn\":\"todo-new_addBtn__2H_TZ\",\"input\":\"todo-new_input__3hgXp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"todo-main_container__3E6Z9\"};","export const checkLocalStorage = (key,fallbackValue) => {\r\n    if(localStorage.getItem(key) != null)\r\n    {\r\n        //convert the item back from a json to a usable variable type.\r\n        return JSON.parse(localStorage.getItem(key));\r\n    }\r\n    else return fallbackValue;\r\n}\r\n\r\nexport const localStore = (key,value) => {\r\n    //convert the value into a string for storage\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n}\r\nexport default checkLocalStorage;","import React, { useState, Fragment } from 'react';\r\nimport styles from \"./todo-item.module.css\";\r\nimport {FaCheckCircle, FaCircle, FaTrash} from \"react-icons/fa\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst TodoItem = (props) => {\r\n    //states\r\n    const [buttonsShown, toggleButtons] = useState(false);\r\n\r\n    //functions for toggling the buttons\r\n    const show = () => toggleButtons(true); \r\n    const hide = () => toggleButtons(false);\r\n\r\n    //Toggling the tick    \r\n    const toggleTodo = () => {\r\n        //use the toggle function to set the new completed value to be the opposite of what is is now.\r\n        props.toggle(!props.isCompleted,props.id);\r\n    }\r\n    const checkTodoState = () => {\r\n        if(props.isCompleted) return <FaCheckCircle className={styles.done} />;\r\n        else return <FaCircle className={styles.notDone} />;\r\n    }\r\n    //variable to keep track of the shown icon\r\n    let icon = checkTodoState();\r\n    return (\r\n        <div className={styles.todo} onMouseOver={show} onMouseLeave={hide}>\r\n            <p className={styles.todoContent} onClick={toggleTodo}>{props.text}</p>\r\n            {buttonsShown ?         \r\n            <Fragment>\r\n                <FaTrash data-tip data-for=\"deleteTooltip\" className={styles.delete} onClick={props.remove}/>\r\n                <ReactTooltip id=\"deleteTooltip\" type=\"light\" place=\"top\" effect=\"solid\">\r\n                    Delete todo\r\n                </ReactTooltip>\r\n            </Fragment> : null}\r\n            <span onClick={toggleTodo}>{icon}</span>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import React from \"react\";\r\nimport style from \"./progress-bar.module.css\";\r\n\r\nconst ProgressBar = (props) => {\r\n    //show this text if you havent completed\r\n    let todosLeftText = props.doneTodos + \"/\" + props.totalTodos + \" completed.\";\r\n    const completedText = \"Well done, you've completed all your tasks!\";\r\n    if(props.totalTodos <= 0) todosLeftText = <p>Start adding some tasks!</p>;\r\n    //get the current state of progress\r\n    let todoProgress = (props.doneTodos / props.totalTodos) * 100 + \"%\";\r\n    //check if the there are no Todos, we dont want to fill the bar green\r\n    if(props.totalTodos === 0) todoProgress = \"0%\";\r\n    //styles which updates the bar's width with the state of props.progress\r\n    let BarStyle = {\r\n        backgroundColor : \"#88BBB0\",\r\n        transition : \".5s\",\r\n        textAlign : \"center\",\r\n        borderRadius : \".2rem\",\r\n        width : todoProgress,\r\n        height : \"100%\",\r\n    }\r\n    return(\r\n        <div className={style.barContainer}>\r\n            {props.totalTodos <= 0 ? todosLeftText : \r\n                <p>Progress - {todoProgress === \"100%\" ? completedText : todosLeftText}</p>}\r\n            <div className={style.barBackground}>\r\n                <div style={BarStyle}></div>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default ProgressBar;","import React from 'react';\r\nimport styles from \"./todo-new.module.css\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst characterLimit = 280;\r\n\r\nconst NewTodo = (props) => {\r\n    const todoInput = (\r\n        <div className={styles.input}>\r\n            <textarea\r\n            maxLength={characterLimit}\r\n            id=\"inputTodo\" \r\n            onChange={props.inputHandler} \r\n            onKeyPress={props.return}/>\r\n            <FaPlus data-tip data-for=\"newTodoTooltip\" className={styles.addBtn} onClick={props.addTodo}/>\r\n            <ReactTooltip id=\"newTodoTooltip\" type=\"light\" place=\"top\" effect=\"solid\">\r\n                Add new todo\r\n            </ReactTooltip>\r\n        </div>\r\n    );\r\n    return (todoInput);\r\n}\r\n\r\nexport default NewTodo;","import Style from \"./todo-filter.module.css\";\r\nimport React, {Fragment} from \"react\";\r\nimport { FaCaretRight, FaTimes } from \"react-icons/fa\";\r\n\r\n\r\n\r\nconst TodoFilters = (props) => {\r\n    let filterString = (\r\n        <Fragment>\r\n            <FaCaretRight className={Style.green}/>\r\n            Filter completed\r\n        </Fragment>\r\n    );\r\n    if(props.isFiltered) {\r\n        filterString = (\r\n            <Fragment>\r\n                <FaTimes className={Style.red}/>\r\n                Clear filter\r\n            </Fragment>\r\n        )\r\n    }\r\n    return (\r\n        <div className={Style.Filter}>\r\n            <button className={Style.FilterBtn} onClick={props.click}>{filterString}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoFilters;","//react and functions\r\nimport React, { useState, useEffect } from 'react';\r\nimport {checkLocalStorage, localStore} from \"../../localStorage\";\r\n//components\r\nimport Todo from \"../todo-item/todo-item\";\r\nimport ProgressBar from \"../progress-bar/progress-bar\";\r\nimport EnterNewTodo from \"../todo-new/todo-new\";\r\nimport TodoFilter from \"../todo-filter/todo-filter\";\r\n//Test button to clear storage\r\nimport ClearStorageBtn from \"../test-clear-storage/clear-storage\";\r\n//Style modules\r\nimport styles from \"./todo-main.module.css\";\r\n\r\nconst TodoContainer = () => {\r\n    var ID = function () {\r\n        // Math.random should be unique because of its seeding algorithm.\r\n        // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n        // after the decimal.\r\n        return '_' + Math.random().toString(36).substr(2, 9);\r\n    };\r\n    //setup default values for the todo\r\n    const defaultTodos = [\r\n        {text: \"Learn react hooks\", ID: ID(), completed: false},\r\n        {text: \"Watch a series on Netflix\", ID: ID(), completed: false},\r\n        {text: \"Import SASS into my project\", ID: ID(), completed: false},\r\n        {text: \"Add completed todos to the App\", ID: ID(), completed: false},\r\n        {text: \"Make dinner for family\", ID: ID(), completed: false},\r\n        {text: \"Make a full stack web app\", ID: ID(), completed: false},\r\n    ];\r\n    //object to keep all variables for local storage keys\r\n    const storage = {\r\n        list: \"todo-list\",\r\n        filterList: \"filtered-list\"\r\n    }\r\n    //Hooks\r\n    const [todoList, updateMainTodos] = useState(checkLocalStorage(storage.list,defaultTodos));\r\n    const [todoInput, updateInputTodo] = useState();\r\n    const [filteredList, updateFilteredList] = useState(todoList);\r\n    const [isFiltered, filterTodos] = useState(false);\r\n\r\n    \r\n    useEffect(() => {\r\n        localStore(storage.filterList, filteredList);\r\n        localStore(storage.list, todoList);\r\n    }, [filteredList, todoList, storage])\r\n    \r\n    const makeNewTodo = (newTodo) => {\r\n        const todoLimit = 9;\r\n        //checks the todo inputted to ensure its not \"nothing\"\r\n        if(newTodo == null || newTodo === undefined || newTodo.trim() === \"\"){\r\n            alert(\"That doesnt look like a valid task.\");           \r\n        }\r\n        //check if the todo already exists\r\n        else if(todoList.some(todo => todo.text.toLowerCase() === newTodo.toLowerCase())){\r\n            alert(\"That task already exists.\");  \r\n        }\r\n        //we are keeping todos a max of 9 for now.\r\n        else if(todoList.length >= todoLimit) {\r\n            alert(\"That's alot of tasks, try to finish and remove those first before adding more.\");\r\n        }\r\n        //Else we add the todo to the todolist state.\r\n        else {\r\n            const newID = ID();\r\n            const newFilteredList = [...filteredList];\r\n            newFilteredList.push({text: newTodo, ID: newID, completed: false});\r\n            updateFilteredList(newFilteredList);\r\n            updateMainTodos([...todoList, {text: newTodo, ID: newID, completed: false}]);\r\n            localStore(storage.list, [...todoList, {text: newTodo, ID: newID, completed: false}]);\r\n        }\r\n        //reset the input after a todo is added \r\n        document.getElementById(\"inputTodo\").value = \"\";\r\n        //update the input state to be blank by not passing a value\r\n        updateInputTodo();\r\n    }\r\n\r\n    const removeTodo = (id) => {\r\n        const newTodoList = [...todoList];\r\n        const newFilteredList = [...filteredList];\r\n        const todo = newFilteredList.find(todo => todo.ID === id);\r\n        //check to see if the current todo is completed, if it is...\r\n        //when removing we have to decrease the completed todos via toggleDone\r\n        if(todo.completed) {\r\n            //we only want to confirm them deleting if its completed\r\n            let confirmed = window.confirm(\"Are you sure you wish to delete this todo?\");\r\n            if(!confirmed) return;\r\n            toggleDone(false,id);\r\n        }\r\n        //we want to delete the todo from both the main and filtered todos.\r\n        newTodoList.splice(newTodoList.indexOf(todo),1);\r\n        newFilteredList.splice(newFilteredList.indexOf(todo),1);\r\n        //update hooks\r\n        updateFilteredList(newFilteredList);\r\n        //keep the main todo list up to date\r\n        updateMainTodos(newTodoList);\r\n    }\r\n\r\n    const TodoInputHandler = (e) => {\r\n        updateInputTodo(e.target.value);\r\n    }\r\n\r\n    //Method to listen for the enter key, if its pressed the todo is added\r\n    const listenForEnterKey = (e) => {\r\n        if(e.key === \"Enter\"){\r\n            if(e.target.value !== \"\"){\r\n                makeNewTodo(e.target.value);\r\n            }\r\n            else alert(\"That doesnt look like a valid task.\");\r\n            //stop the default behaviour of enter\r\n            e.preventDefault();\r\n        }\r\n    }   \r\n    const toggleDone = (state, todo_ID) => {\r\n        const newTodoList = [...todoList];\r\n        //find the todo via looking for the ID\r\n        const todo = newTodoList.find(todo => todo.ID === todo_ID);\r\n        todo.completed = state;\r\n        //Update the completed todo tracking variables/states\r\n        if(state === true){\r\n            //we need to update the filtered list to either show all the non completed, or show the full list\r\n            if(isFiltered) updateFilteredList(newTodoList.filter(todo => !todo.completed));\r\n            else updateFilteredList(newTodoList);\r\n        }\r\n        //keep the main todo list up to date\r\n        updateMainTodos(newTodoList);\r\n    }\r\n\r\n    const todoFilter = (filter) => {\r\n        let newFilteredList = [];\r\n        if(!isFiltered){\r\n            todoList.forEach(todo => {\r\n                if(todo[filter] === false){\r\n                    newFilteredList.push(todo);\r\n                }\r\n            });\r\n        }   \r\n        else {\r\n            newFilteredList = [...todoList];\r\n        }\r\n        filterTodos(!isFiltered);\r\n        updateFilteredList(newFilteredList);\r\n}\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <TodoFilter click={todoFilter.bind(this, \"completed\")} isFiltered={isFiltered}/>\r\n            <ProgressBar doneTodos={todoList.filter(todo => todo.completed).length} totalTodos={todoList.length}/>\r\n            {filteredList.map((todo) => {\r\n                return (\r\n                    <Todo \r\n                    key={todo.ID}\r\n                    id={todo.ID}\r\n                    text={todo.text}\r\n                    isCompleted={todo.completed}\r\n                    toggle={toggleDone}\r\n                    remove={removeTodo.bind(this,todo.ID)}/>\r\n                )\r\n            })}\r\n            <EnterNewTodo \r\n            addTodo={makeNewTodo.bind(this,todoInput)}\r\n            inputHandler={TodoInputHandler}\r\n            return={listenForEnterKey}/>\r\n            {/* <ClearStorageBtn /> */}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoContainer;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport TodoList from \"../components/todo-main/todo-main\";\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"App\">\r\n        <h1>Todo App</h1>\r\n        <TodoList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}